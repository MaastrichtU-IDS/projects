name: Get Projects data from GitHub GraphQL API
on:
  workflow_dispatch:
    inputs:
      clear:
        description: 'Clear the projects triplestore'
        required: true
        default: 'false'
  push:
    branches: [ main ]
    paths:
    - '.github/workflows/get-projects-data.yml'
    - 'datasets/doap-github/query_graphql.py'
  schedule:
    - cron:  '00 03,13 * * *'
    # Everyday at 03:00am and 13:00

jobs:
  query-graphql-doap-projects:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/cache@v2
      name: Configure pip caching
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Important part here (can be reused to run locally):
    - name: Install Python dependencies
      run: |
        python -m pip install -r etl/requirements.txt
    
    - name: Query GitHub GraphQL API with Python
      env:
        GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      run: |-
        python etl/get_doap_projects.py
        echo 'File generated:'
        ls doap-rdf

    - name: Commit and push releases JSON file if changed
      run: |-
        git diff
        git config --global user.email "vincent.emonet@gmail.com"
        git config --global user.name "Vincent Emonet"
        git add assets/ids_github_data.json
        git commit -m "Update GitHub JSON data content" || exit 0
        git push

    - name: Upload RDF output artifact
      uses: actions/upload-artifact@v1
      with:
        name: rdf-output
        path: doap-rdf

  upload-rdf-doap-projects:
    runs-on: ubuntu-latest
    needs: query-graphql-doap-projects
    steps:
    # - uses: actions/checkout@v2

    - name: Get RDF output artifact
      uses: actions/download-artifact@v1
      with:
        name: rdf-output

    - name: Clear older graph in the triplestore
      if: github.event.inputs.clear == 'true'
      uses: vemonet/sparql-operations-action@v1
      with:
        query: "CLEAR GRAPH <https://w3id.org/um/ids/projects/graph>"
        endpoint: https://graphdb.dumontierlab.com/repositories/ids-projects/statements
        user: ${{ secrets.GRAPHDB_USER }}
        password: ${{ secrets.GRAPHDB_PASSWORD }}

    - name: Upload the RDF to the triplestore
      uses: MaastrichtU-IDS/RdfUpload@master
      with:
        # Wildcard does not work
        file: rdf-output/
        endpoint: https://graphdb.dumontierlab.com/repositories/ids-projects/statements
        user: ${{ secrets.GRAPHDB_USER }}
        password: ${{ secrets.GRAPHDB_PASSWORD }}
        graph: "https://w3id.org/um/ids/projects/graph"

  # query-graphql-releases:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out repo
  #     uses: actions/checkout@v2
  #   - name: Set up Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - uses: actions/cache@v2
  #     name: Configure pip caching
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
    
  #   # Important part here (can be reused to run locally):
  #   - name: Install Python dependencies
  #     run: |
  #       python -m pip install -r get_github_data/requirements.txt
  #   - name: Query GitHub GraphQL API with Python
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
  #     run: |-
  #       python get_github_data/query_graphql.py
  #       cat assets/ids_github_data.json

  #   - name: Commit and push releases JSON file if changed
  #     run: |-
  #       git diff
  #       git config --global user.email "vincent.emonet@gmail.com"
  #       git config --global user.name "Vincent Emonet"
  #       git add -A
  #       git commit -m "Update GitHub JSON data content" || exit 0
  #       git push
